<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- 로그인 실패! 
	접근 거부가 발생한 상황(member 계정으로 /notice/register를 요청 시)에 
	단순 메시지 처리 이상의 다양한 처리를 하고자 한다면 AccessDeniedHandler를 직접 구현해야 함
	CustomAccessDeniedHandler를 빈으로 등록함
	-->
	<bean id="customAccessDenied" 
		class="kr.or.ddit.security.CustomAccessDeniedHandler"></bean>
	
	<!-- 로그인 성공!
	인증(로그인) 성공 처리자 AuthenticationSuccessHandler
	-->
	<bean id="customLoginSuccess"
		class="kr.or.ddit.security.CustomLoginSuccessHandler"></bean>
	
	<!-- 사용자가 정의한 비밀번호 암호화 처리기를 빈으로 등록 -->
	<bean id="customPasswordEncoder"
		class="kr.or.ddit.security.CustomNoOpPasswordEncoder"></bean>
	
	<!-- 스프링 시큐리티의 UserDetailService를 구현해서 사용자의 상세 정보를 얻어오기 위함 -->
	<bean id="customUserDetailService" 
		class="kr.or.ddit.security.CustomUserDetailService"></bean>
	
	<!-- 스프링 시큐리티에서 제공해줌 -->
<!-- 	<bean id="bcryptPasswordEncoder" -->
<!-- 		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" /> -->
	
	<security:http>
	<!-- URI 패턴으로 접근 제한을 설정함 
	pattern : url 요청 경로 
	access  : 접근 제한 정책
	-->
		<security:intercept-url pattern="/board/list" access="permitAll" />
		<security:intercept-url pattern="/board/register" 
			access="hasRole('ROLE_MEMBER')" />
		<security:intercept-url pattern="/notice/list" access="permitAll" />
		<security:intercept-url pattern="/notice/register" 
			access="hasRole('ROLE_ADMIN')" />
		
		<!-- 폼 기능 인증 기능 사용. 
		접근 제한에 걸리면 스프링 시큐리티가 기본적으로 제공하는 로그인 페이지로 이동함 -->
<!-- 		<security:form-login /> -->
<!-- 		<security:form-login  -->
<!-- 			authentication-success-handler-ref="customLoginSuccess" /> -->
		<!-- 사용자가 정의한 로그인 페이지의 URI를 지정함 -->
<!-- 		<security:form-login login-page="/login" /> -->
		<security:form-login login-page="/login" 
			authentication-success-handler-ref="customLoginSuccess" />
		
		<!-- 접근 거부 처리자(접근 거부가 발생한 상황을 처리)의 URI를 지정 -->
<!-- 		<security:access-denied-handler error-page="/accessError" /> -->
		<!-- 
		개발자가 등록한  CustomAccessDeniedHandler를 접근 거부 처리자로 지정함
		- 공지사항 등록 화면(/notice/register)은 회원(member)의 접근이 불가능한 페이지(관리자만 접근 가능)
		- 지정된 접근 거부 처리자(CustomAccessDeniedHandler)의 처리(Handle) 메서드를 자동 호출함
		- 지정된 접근 거부 처리자(CustomAccessDeniedHandler)에서 
		    접근 거부 처리 페이지(/accessError)로 리다이렉트(요청 흐름이 이동) 시킴
		-->
		<security:access-denied-handler ref="customAccessDenied" />
		
		<!-- 로그아웃. 세션을 무효화 함 -->
		<security:logout logout-url="/logout" invalidate-session="true" />
	</security:http>
	
	<security:authentication-manager>
	<!-- 
	지정된 아이디와 패스워드로 로그인이 가능하도록 설정함 
	authorities : ROLE_MEMBER, ROLE_ADMIN
	member 사용자 : /board/list, /board/register, /notice/list
	admin 사용자   : /board/list, /board/register, /notice/list, /notice/register
	
	스프링 시큐리티 5버전부터는 패스워드 암호화 처리기를 반드시 이용하도록 변경이 되었음
	암호화 처리기를 사용하지 않도록 "{noop}" 문자열을 비밀번호 앞에 사용.
	-->
<!-- 		<security:authentication-provider> -->
<!-- 			<security:user-service> -->
<!-- 				<security:user name="member" password="{noop}1234"  -->
<!-- 					authorities="ROLE_MEMBER"/> -->
<!-- 				<security:user name="admin" password="{noop}abcd"  -->
<!-- 					authorities="ROLE_MEMBER,ROLE_ADMIN"/> -->
<!-- 			</security:user-service> -->
<!-- 		</security:authentication-provider> -->
		<!-- 인증 매니저에 인증 제공자를 등록 -->
		<!-- 
		CustomUserDetailService 빈을 인증 제공자에 지정함 
		스프링 시큐리티의 UserDetailService를 구현해서 사용자의 상세 정보를 얻어오기 위함
		-->
		<security:authentication-provider user-service-ref="customUserDetailService">
			<!-- 데이터 소스 지정 -->
<!-- 			<security:jdbc-user-service data-source-ref="dataSource" /> -->
<!-- 			<security:jdbc-user-service  -->
<!-- 				data-source-ref="dataSource" -->
<!-- 				users-by-username-query="SELECT MEMBERID, PASSWORD, ENABLED FROM MEMBER WHERE MEMBERID=?" -->
<!-- 				authorities-by-username-query="SELECT B.MEMBERID, A.AUTH FROM MEMBER_AUTH A, MEMBER B WHERE A.MEMBERID = B.MEMBERID AND B.MEMBERID=?" -->
<!-- 			/> -->
			
			<!-- 사용자가 정의한 비밀번호 암호화 처리기 지정 -->
			<security:password-encoder ref="customPasswordEncoder" />
			
			<!-- BCryptPasswordEncoder 비밀번호 암호화 처리기 지정 -->
<!-- 			<security:password-encoder ref="bcryptPasswordEncoder" /> -->
		</security:authentication-provider>
	</security:authentication-manager>
	
</beans>









